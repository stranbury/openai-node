generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["next_auth"]
}
enum Role {
  USER
  ADMIN
  @@schema("next_auth")
}

model accounts {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String? @db.Uuid
  users              users?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessiontoken_unique")
  userId       String?  @db.Uuid
  users        users?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model users {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?    @unique(map: "email_unique")
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  prompts       prompt[]
  chats         chat[]
  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

model prompt {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(255)
  type      String   @db.VarChar(255)
  description String @db.Text
  content   String   @db.Text
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  authorId  String?  @db.Uuid
  author    users?   @relation(fields: [authorId], references: [id])
  chats     chat[]
  @@schema("next_auth")
}

model chat {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  temperature Int @default(0)
  systemPromptId String? @db.Uuid
  userId String @db.Uuid
  user users @relation(fields: [userId], references: [id])
  memory Json @db.Json
  summary String @db.Text
  archived Boolean @default(false)
  systemPrompt prompt? @relation(fields: [systemPromptId], references: [id])
  updatedAt DateTime @db.Timestamptz(6)
  createdAt DateTime @db.Timestamptz(6)
  @@schema("next_auth")
}


